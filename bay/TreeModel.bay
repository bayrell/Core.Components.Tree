/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.Tree;

use Runtime.CoreStruct;
use Core.Components.Dialog.DialogModel;
use Core.Components.ContextMenu.ContextMenuModel;
use Core.Components.Tree.TreeItem;


struct TreeModel extends TreeItem
{
	const string DIALOG_CREATE_FILE = "dialog_create_file";
	const string DIALOG_CREATE_FOLDER = "dialog_create_folder";
	const string DIALOG_RENAME_ITEM = "dialog_rename_item";
	const string DIALOG_DELETE_ITEM = "dialog_delete_item";
	const string DIALOG_RELOAD_ITEM = "dialog_reload_item";
	
	public bool is_open = true;
	public string selected = "";
	public DialogModel dialog = new DialogModel();
	public ContextMenuModel contextmenu = new ContextMenuModel();
	public Collection<TreeItem> items = null;
	
	
	
	/**
	 * Split path
	 */
	lambda Collection<int> splitPath(string path)
	{
		Collection<string> path = rs::explode(".", path);
		return path.map( method rtl::toInt );
	}
	
	
	
	/**
	 * Select item
	 * @param TreeModel model
	 * @param string path
	 * @return TreeModel
	 */
	lambda TreeModel selectItem(TreeModel model, string path)
	{
		model <= selected <= path;
		return model;
	}
	
	
	
	/**
	 * Show navigator context menu
	 * @param TreeModel model
	 * @return TreeItem
	 */
	lambda TreeItem getSelectedItem(TreeModel model)
	{
		Collection<int> path = static::splitPath( model.selected );
		TreeItem item = static::getTreeItem( model, path );
		return item;
	}
	
	
	
	/**
	 * Returns tree items by path
	 */
	lambda Collection<TreeItem> getTreePathItems(TreeItem item, Collection<int> path)
	{
		Vector<TreeItem> items = new Vector();
		for (int i=0; i<path.count(); i++)
		{
			int key = path.item(i);
			item = item.getItem(key, null);
			if (item == null) return null;
			items.push(item);
		}
		return items.toCollection();
	}
	
	
	
	/**
	 * Return name path
	 */
	lambda Collection<int> getNamePath(TreeItem model, Collection<int> path, string ch = "/")
	{
		Collection<TreeItem> items = static::getTreePathItems(model, path);
		string path_str = rs::join(ch, items.map( lambda string (TreeItem item) use (attr) => item.getName() ));
		if (path_str == "") return ch;
		return ch ~ path_str;
	}
	
	
	
	/**
	 * Returns tree item by path
	 */
	lambda TreeItem getTreeItem(TreeModel model, Collection<int> path)
	{
		TreeItem item = model;
		for (int i=0; i<path.count(); i++)
		{
			int key = path.item(i);
			item = item.getItem(key, null);
			if (item == null) return null;
		}
		
		return item;
	}
	
	
	
	/**
	 * Set tree item by path
	 */
	lambda TreeItem setTreeItem(TreeItem model, Collection<int> path, TreeItem item)
	{
		if (path.count() == 1)
		{
			model = model.setItem(path.get(0), item);
			return model;
		}
		
		int key = path.get(0);
		model = model.setItem(
			key, 
			static::setTreeItem(
				model.getItems().get(key), 
				path.removeFirstIm(), 
				item
			)
		);
		return model;
	}
	
	
	
	/**
	 * Add tree item by path
	 */
	lambda TreeItem addTreeItem(TreeItem model, Collection<int> path, TreeItem item, callback add_item = null)
	{
		if (path.count() == 0)
		{
			Collection<TreeItem> items = model.getItems();
			if (items != null)
			{
				if (add_item)
				{
					items = add_item(items, item);
				}
				else
				{
					items = items.pushIm(item);
				}
				model = model.setItems(items);
			}
			else
			{
				Collection items = [ item ];
				model = model.setItems( items.toCollection() );
			}
			return model;
		}
		
		int key = path.get(0);
		model = model.setItem(
			key, 
			static::addTreeItem(
				model.getItems().get(key), 
				path.removeFirstIm(), 
				item,
				add_item
			)
		);
		return model;
	}
	
	
	
	/**
	 * Delete tree item by path
	 */
	lambda TreeItem deleteTreeItem(TreeItem model, Collection<int> path)
	{
		if (path.count() == 1)
		{
			Collection<TreeItem> items = model.getItems();
			items = items.removeIm( path.get(0) );
			model = model.setItems(items);
			return model;
		}
		
		int key = path.get(0);
		model = model.setItem(
			key, 
			static::deleteTreeItem(
				model.getItems().get(key), 
				path.removeFirstIm()
			)
		);
		return model;
	}
	
	
	
	/**
	 * Set is open
	 */
	lambda TreeModel setIsOpen(TreeItem model, Collection<int> path, bool flag = true)
	{
		TreeItem item = static::getTreeItem(model, path);
		item <= is_open <= flag;
		return static::setTreeItem(model, path, item);
	}
	
	
	
}