/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.Tree;

use Core.UI.UIController;
use Core.UI.Annotations.BindModel;
use Core.UI.Annotations.BindValue;
use Core.UI.Annotations.Event;
use Core.UI.Annotations.EventAsync;
use Core.UI.Events.MouseEvent.MouseClickEvent;
use Core.UI.Events.MouseEvent.MouseContextMenuEvent;
use Core.UI.Events.MouseEvent.MouseDoubleClickEvent;
use Core.UI.Events.UserEvent.ChangeEvent;
use Core.UI.Render.CoreManager;
use Core.Components.Dialog.DialogModel;
use Core.Components.Dialog.DialogResultEvent;
use Core.Components.ContextMenu.ContextMenuItemClickEvent;
use Core.Components.ContextMenu.ContextMenuModel;
use Core.Components.Tree.TreeDialogModel;
use Core.Components.Tree.TreeItem;
use Core.Components.Tree.TreeItemEvent;
use Core.Components.Tree.TreeModel;


class TreeManager extends CoreManager
{
	public TreeModel model;
	
	
	/**
	 * Create new item
	 */
	public TreeItem newItem(Dict map)
	{
		return new TreeItem(map);
	}
	
	
	
	/* ---------------------------------- Events ---------------------------------- */
	
	
	/**
	 * Event item click
	 */
	public void onTreeItemLabelClick(UIEvent<MouseClickEvent> e)
	{
		string tree_data_path = e.event.ui.props.get("data-path");
		
		/* Select node */
		Model model = this.model;
		model = TreeModel::selectItem(model, tree_data_path);
		this.setModel(model);
	}
	
	
	
	/**
	 * Event item click
	 */
	public void onTreeItemLabelContextMenu(UIEvent<MouseContextMenuEvent> e)
	{
		string tree_data_path = e.event.ui.props.get("data-path");
		
		/* Show context menu and select item */
		Model model = this.model;
		model <= contextmenu <= ContextMenuModel::show
		(
			model.contextmenu,
			e.event.pageX - window.scrollX,
			e.event.pageY - window.scrollY
		);
		model = TreeModel::selectItem(model, tree_data_path);
		this.setModel(model);
	}
	
	
	
	/**
	 * Event item double click
	 */
	public void onTreeItemLabelDoubleClick(UIEvent<MouseClickEvent> e)
	{
		string tree_data_path = e.event.ui.props.get("data-path");
		static::openItem(tree_data_path);
	}
	
	
	
	/**
	 * Navigation menu item click
	 */
	public void onContextMenuClick(UIEvent<ContextMenuItemClickEvent> e)
	{
		/* Hide context menu */
		Model model = this.model;
		model <= contextmenu <= ContextMenuModel::hide(model.contextmenu);
		this.setModel(model);
		
		string path = this.model.selected;
		if (e.event.tag == 'create_file')
		{
			static::showCreateFile(path);
		}
		else if (e.event.tag == 'create_folder')
		{
			static::showCreateFolder(path);
		}
		else if (e.event.tag == 'rename_node')
		{
			static::showRenameItem(path);
		}
		else if (e.event.tag == 'delete_node')
		{
			static::showDeleteItem(path);
		}
		else if (e.event.tag == 'reload_node')
		{
			static::reloadItem(path);
		}
		
	}
	
	
	
	/**
	 * Dialog create result
	 */
	public void onDialogResult(UIEvent<DialogResultEvent> e)
	{
		DialogResultEvent event = e.event;
		if (event.value == DialogModel::BUTTON_RESULT_OK)
		{
			/* Create file or folder */
			if (
				event.model.kind == TreeDialogModel::KIND_CREATE_FILE or
				event.model.kind == TreeDialogModel::KIND_CREATE_FOLDER
			)
			{
				static::createDialogItem(event);
			}
			
			/* Rename node */
			if (event.model.kind == TreeDialogModel::KIND_RENAME_ITEM)
			{
				static::renameDialogItem(event);
			}
			
			/* Remove node */
			if (event.model.kind == TreeDialogModel::KIND_DELETE_ITEM)
			{
				static::removeDialogItem(event);
			}
			
			/* Reload node */
			if (event.model.kind == TreeDialogModel::KIND_RELOAD_ITEM)
			{
				/*static::reloadItem(event);*/
			}
		}
	}
	
	
	
	/* ---------------------------------- Reload Item ---------------------------------- */
	
	
	/**
	 * Reload item
	 */
	void reloadItem(string tree_data_path)
	{
	}
	
	
	
	/* ---------------------------------- Open Item ---------------------------------- */
	
	
	
	/**
	 * Open item
	 */
	void openItem(string tree_data_path)
	{
		Collection<int> path = TreeModel::splitPath(tree_data_path);
		TreeItem item = TreeModel::getTreeItem(this.model, path);
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			item = item.copy({
				"is_open": not item.is_open,
				"is_reload": false,
			});
			
			/* Update model */
			this.setModel( TreeModel::setTreeItem(this.model, path, item) );
			
			/* Signal Out */
			this.signalOut( new TreeItemEvent{ "kind": TreeItemEvent::OPEN, "path": path, "item": item } );
		}
	}
	
	
	
	
	
	/* ---------------------------------- Create Item ---------------------------------- */
	
	
	/**
	 * Create new file
	 */
	public void showCreateFile(string tree_data_path)
	{
		Collection<int> path = TreeModel::splitPath(tree_data_path);
		
		TreeItem item = TreeModel::getTreeItem(this.model, path);
		string file_path = TreeModel::getNamePath(this.model, path);
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			TreeDialogModel dialog = new TreeDialogModel
			{
				"is_open": true,
				"is_modal": true,
				"input": "",
				"style": DialogModel::STYLE_PROMT,
				"kind": TreeDialogModel::KIND_CREATE_FILE,
				"path": path,
				"file_path": file_path,
				"title": "",
				"message": "Create file in " ~ file_path,
			};
			this.updateModel(
			{
				"dialog": dialog,
			});
		}
		else
		{
			this.updateModel(
			{
				"alert": new DialogModel{
					"title": "Warning",
					"message": "File must be folder",
				}
			});
		}
		
	}
	
	
	
	/**
	 * Show create new folder
	 */
	public void showCreateFolder(string tree_data_path)
	{
		Collection<int> path = TreeModel::splitPath(tree_data_path);
		
		TreeItem item = TreeModel::getTreeItem(this.model, path);
		string file_path = TreeModel::getNamePath(this.model, path);
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			this.updateModel(
			{
				"dialog": new TreeDialogModel{
					"is_open": true,
					"is_modal": true,
					"input": "",
					"style": DialogModel::STYLE_PROMT,
					"kind": TreeDialogModel::KIND_CREATE_FOLDER,
					"path": path,
					"file_path": file_path,
					"title": "",
					"message": "Create folder in " ~ file_path,
				}
			});
		}
		else
		{
			this.updateModel(
			{
				"alert": new DialogModel{
					"title": "Warning",
					"message": "File must be folder",
				}
			});
		}
	}
	
	
	
	/**
	 * Create item by dialog result
	 */
	public TreeItem createNewItemByDialogResult(DialogResultEvent result)
	{
		string name = result.input;
		string kind = "";
		TreeDialogModel model = result.model;
		
		if (model instanceof TreeDialogModel)
		{
			if (model.kind == TreeDialogModel::KIND_CREATE_FILE) kind = TreeItem::KIND_FILE;
			else if (model.kind == TreeDialogModel::KIND_CREATE_FOLDER) kind = TreeItem::KIND_FOLDER;
			
			TreeItem item = this.newItem({
				"name": name,
				"kind": kind,
			});
			
			return item;
		}
		
		return null;
	}
	
	
	
	/**
	 * Create item
	 */
	public void createDialogItem(DialogResultEvent result)
	{
		Collection<int> path = result.model.path;
		TreeItem item = this.createNewItemByDialogResult(result);
		if (item != null)
		{
			TreeModel model = TreeModel::addTreeItem
			(
				this.model,
				path,
				item,
				method this.pushItemToCollection
			);
			this.setModel( model );
			
			/* return created pos item */
			TreeItem p = TreeModel::getTreeItem(this.model, path);
			int pos = p.items.indexOf(item);
			
			/* Signal Out */
			this.signalOut( new TreeItemEvent{ "kind": TreeItemEvent::CREATE, "path": path, "item": item } );
		}
	}
	
	
	
	/* ---------------------------------- Rename Item ---------------------------------- */
	
	
	/**
	 * Rename node
	 */
	public void showRenameItem(string tree_data_path)
	{
		Collection<int> path = TreeModel::splitPath(tree_data_path);
		TreeItem item = TreeModel::getTreeItem(this.model, path);
		string file_path = TreeModel::getNamePath(this.model, path);
		string title = "";
		
		if (item == null)
		{
			return;
		}
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			title = "Rename folder " ~ file_path;
		}
		else if (item.kind == TreeItem::KIND_FILE)
		{
			title = "Rename file " ~ file_path;
		}
		
		if (title)
		{
			this.updateModel(
			{
				"dialog": new TreeDialogModel{
					"is_open": true,
					"is_modal": true,
					"input": item.name,
					"style": DialogModel::STYLE_PROMT,
					"kind": TreeDialogModel::KIND_RENAME_ITEM,
					"path": path,
					"file_path": file_path,
					"title": "",
					"message": title,
				}
			});
		}
		
	}
	
	
	
	/**
	 * Rename item
	 */
	public void renameDialogItem(DialogResultEvent result)
	{
		TreeItem item = TreeModel::getTreeItem(this.model, result.model.path);
		if (item != null)
		{
			TreeItem item_new = null;
			TreeItem item_old = item;
			item_new <= name <= result.input;
			TreeModel model = TreeModel::setTreeItem
			(
				this.model,
				result.model.path,
				item_new
			);
			this.setModel( model );
			
			/* Signal Out */
			this.signalOut(
				new TreeItemEvent
				{
					"kind": TreeItemEvent::RENAME,
					"path": path,
					"item_new": item_new,
					"item_old": item_old,
				}
			);
		}
	}
	
	
	
	
	/* ---------------------------------- Delete Item ---------------------------------- */
	
	
	/**
	 * Show delete node
	 */
	public void showDeleteItem(string tree_data_path)
	{
		Collection<int> path = TreeModel::splitPath(tree_data_path);
		TreeItem item = TreeModel::getTreeItem(this.model, path);
		string file_path = TreeModel::getNamePath(this.model, path);
		string title = "";
		
		if (item == null)
		{
			return;
		}
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			title = "Delete folder " ~ file_path ~ "?";
		}
		else if (item.kind == TreeItem::KIND_FILE)
		{
			title = "Delete file " ~ file_path ~ "?";
		}
		
		if (title)
		{
			this.updateModel(
			{
				"dialog": new TreeDialogModel{
					"is_open": true,
					"is_modal": true,
					"input": item.name,
					"style": DialogModel::STYLE_CONFIRM,
					"kind": TreeDialogModel::KIND_DELETE_ITEM,
					"path": path,
					"file_path": file_path,
					"title": "",
					"message": title,
				}
			});
		}
		
	}
	
	
	
	/**
	 * Remove item
	 */
	public void removeDialogItem(DialogResultEvent result)
	{
		TreeItem item = TreeModel::getTreeItem(this.model, result.model.path);
		TreeModel model = TreeModel::deleteTreeItem
		(
			this.model,
			result.model.path
		);
		this.setModel( model );
		
		/* Signal Out */
		this.signalOut( new TreeItemEvent{ "kind": TreeItemEvent::DELETE, "path": path, "item": item } );
	}
	
	
}