/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.Tree;

use Runtime.CoreStruct;


struct TreeItem extends CoreStruct
{
	const string KIND_FOLDER = "folder";
	const string KIND_FILE = "file";
	
	public string name = "";
	public string kind = "";
	public Collection<TreeItem> items = null;
	public bool is_open = false;
	public bool is_reload = false;
	
	
	
	/**
	 * Returns items name
	 */
	string getItemName()
	{
		return this.name;
	}
	
	
	
	/**
	 * Returns item
	 */
	Collection<TreeItem> getItems()
	{
		return this.items;
	}
	
	
	
	/**
	 * Returns item
	 */
	TreeItem setItems(Collection<TreeItem> items)
	{
		TreeItem model = this;
		model <= items <= items;
		return model;
	}
	
	
	
	/**
	 * Returns item
	 */
	TreeItem getItem(int key, TreeItem def_val = null)
	{
		Collection<TreeItem> items = this.getItems();
		if (items == null) return def_val;
		return items.get(key, def_val);
	}
	
	
	
	/**
	 * Set item
	 */
	TreeItem setItem(int key, TreeItem item)
	{
		TreeItem model = this;
		Collection<TreeItem> items = this.getItems();
		items = items.setIm(key, item);
		model = this.setItems(items);
		return model;
	}
	
	
	
	/**
	 * Returns tree items by path
	 */
	public Collection<TreeItem> getTreePathItems(Collection<int> path)
	{
		TreeItem item = this;
		Vector<TreeItem> items = new Vector();
		for (int i=0; i<path.count(); i++)
		{
			int key = path.item(i);
			item = item.getItem(key, null);
			if (item == null) return null;
			items.push(item);
		}
		return items.toCollection();
	}
	
	
	
	/**
	 * Return name path
	 */
	public Collection<int> getNamePath(Collection<int> path, string ch = "/")
	{
		TreeItem model = this;
		Collection<TreeItem> items = model.getTreePathItems(path);
		string path_str = rs::join(ch, items.map( lambda string (TreeItem item) use (attr) => item.getItemName() ));
		if (path_str == "") return ch;
		return ch ~ path_str;
	}
	
	
	
	/**
	 * Returns tree item by path
	 */
	public TreeItem getTreeItem(Collection<int> path)
	{
		TreeItem item = this;
		for (int i=0; i<path.count(); i++)
		{
			int key = path.item(i);
			item = item.getItem(key, null);
			if (item == null) return null;
		}
		
		return item;
	}
	
	
	
	/**
	 * Set tree item by path
	 */
	public TreeItem setTreeItem(Collection<int> path, TreeItem item)
	{
		TreeItem model = this;
		
		if (path.count() == 1)
		{
			model = model.setItem(path.get(0), item);
			return model;
		}
		
		int key = path.get(0);
		model = model.setItem(
			key, 
			model.getItems().get(key).setTreeItem(
				path.removeFirstIm(), 
				item
			)
		);
		return model;
	}
	
	
	
	/**
	 * Add tree item by path
	 */
	public TreeItem addTreeItem(Collection<int> path, TreeItem item, callback add_item = null)
	{
		TreeItem model = this;
		
		if (path.count() == 0)
		{
			Collection<TreeItem> items = model.getItems();
			if (items != null)
			{
				if (add_item)
				{
					items = add_item(items, item);
				}
				else
				{
					items = items.pushIm(item);
				}
				model = model.setItems(items);
			}
			else
			{
				Collection items = [ item ];
				model = model.setItems( items.toCollection() );
			}
			return model;
		}
		
		int key = path.get(0);
		model = model.setItem(
			key, 
			model.getItems().get(key).addTreeItem(
				path.removeFirstIm(), 
				item,
				add_item
			)
		);
		
		return model;
	}
	
	
	
	/**
	 * Delete tree item by path
	 */
	public TreeItem deleteTreeItem(Collection<int> path)
	{
		TreeItem model = this;
		
		if (path.count() == 1)
		{
			Collection<TreeItem> items = model.getItems();
			items = items.removeIm( path.get(0) );
			model = model.setItems(items);
			return model;
		}
		
		int key = path.get(0);
		model = model.setItem(
			key, 
			model.getItems().get(key).deleteTreeItem(
				path.removeFirstIm()
			)
		);
		
		return model;
	}
	
	
	
	/**
	 * Set is open
	 */
	public TreeModel setIsOpen(Collection<int> path, bool flag = true)
	{
		TreeItem item = this.getTreeItem(path);
		item <= is_open <= flag;
		return this.setTreeItem(path, item);
	}
	
	
	
}