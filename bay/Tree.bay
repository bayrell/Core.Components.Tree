/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.Tree;

use Runtime.RuntimeUtils;
use Core.Annotations.BindModel;
use Core.Annotations.BindValue;
use Core.Annotations.Event;
use Core.Annotations.EventAsync;
use Core.Components.ContextMenu.ContextMenu;
use Core.Components.ContextMenu.ContextMenuEvent;
use Core.Components.ContextMenu.ContextMenuModel;
use Core.Components.Dialog.Dialog;
use Core.Components.Dialog.DialogEvent;
use Core.Components.Dialog.DialogModel;
use Core.Components.Tree.TreeEvent;
use Core.Components.Tree.TreeItem;
use Core.Components.Tree.TreeModel;
use Core.UI.Events.MouseEvent.MouseClickEvent;
use Core.UI.Events.MouseEvent.MouseContextMenuEvent;
use Core.UI.Events.MouseEvent.MouseDoubleClickEvent;
use Core.UI.Component;
use Core.UI.PocketModel;
use Core.UI.RenderHelper;


class Tree extends Component
{

	public TreeModel model;
	public Reference contextmenu = null;
	public Reference dialog = null;
	
	
	/**
	 * Returns model name
	 */
	lambda string modelName() => classof TreeModel;
	
	
	
	/**
	 * Returns require components
	 */
	lambda Collection<string> components() => 
	[
		classof ContextMenu,
		classof Dialog
	];
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			%tree_item > %tree_items{
				padding-left: 15px;
			}
			%tree_icon, %tree_label{
				display: inline-block;
				vertical-align: middle;
				-webkit-user-select: none;
				-moz-user-select: none;
				-khtml-user-select: none;
				-ms-user-select: none;
			}
			%tree_icon{
				cursor: pointer;
				width: 22px;
				height: 22px;
				font-size: 16px;
				text-align: center;
			}
			%tree_label{
				cursor: pointer;
				padding: 2px;
			}
			%tree_label:hover{
				background-color: #eaeaea;
			}
			%tree_item.active > %tree_item_name > %tree_label{
				background-color: blue;
				color: white;
			}
			%tree_item.reload > %tree_item_name > %tree_label{
				background-color: gray;
				color: white;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	lambda Template render(TreeModel model, UIStruct ui, PocketModel pocket) =>
		rtl::normalizeUIVector([
			static::renderTree(model, ui),
			static::renderContextMenu(model),
			static::renderDialogs(model),
		])
	;
	
	
	
	/**
	 * Component render
	 */
	lambda Template renderTree(TreeModel model, UIStruct ui) =>
		
		<div @class='tree'>
			{ static::renderTreeItems(model, model, "", ui.props) }
		</div>
		
	;
	
	
	
	/**
	 * Tree render items
	 */
	lambda Collection<UIStruct> renderTreeItems
	(
		TreeModel model, 
		TreeItem item, 
		string path, 
		Dict<primitive> props
	)
	{
		if (item == null) return "";
		if (item.is_open == false) return "";
		
		Collection<TreeItem> items = item.getItems();
		if (items == null) return "";
		
		return 
			items.map( 
				lambda Collection<UIStruct> (TreeItem item, int index) use (model, path, props) => 
					static::renderTreeItem(
						model, 
						item, 
						(path !== "") ? path ~ "." ~ index : rtl::toString(index), 
						props
					)
			) 
		;
	}
	
	
	
	lambda Collection<CoreStruct> treeItemLabelAnnotations() =>
		[
			new Event{ 
				"event": classof MouseClickEvent, 
				"method_name": "onTreeItemLabelClick", 
				"preventDefault": true, 
			},
			new Event{ 
				"event": classof MouseContextMenuEvent, 
				"method_name": "onTreeItemLabelContextMenu", 
				"cancel": true, 
			},
			new Event{ 
				"event": classof MouseDoubleClickEvent, 
				"method_name": "onTreeItemLabelDoubleClick", 
				"preventDefault": true, 
				"cancel": true, 
			},
		]
	;
	
	
	/**
	 * Tree render item
	 */
	lambda Template renderTreeItem(TreeModel model, TreeItem item, string path, Dict<primitive> props)
	{
		if (item == null) return "";
		
		return
			<div @class='tree_item' class={ static::getTreeItemClassName(model, item, path) } 
				@watch=[ model.selected, item ] >
				<div @class='tree_item_name' data-path={ path } @annotations={ static::treeItemLabelAnnotations() }>
					<div @class='tree_icon'>{ static::renderTreeItemIcon(model, item, props) }</div>
					<div @class='tree_label'>{ item.getItemName() }</div>
				</div>
				<div @class='tree_items'>{ static::renderTreeItems(model, item, path, props) }
				</div>
			</div>
		;
	}
	
	
	
	/**
	 * Returns item class name
	 */
	lambda string getTreeItemClassName(TreeModel model, TreeItem item, string path)
	{
		string class_name = "";
		if (model.selected === path) class_name ~= "active ";
		if (item.is_reload) class_name ~= "reload ";
		return class_name;
	}
	
	
	
	/**
	 * Tree render icon
	 */
	lambda Collection<UIStruct> renderTreeItemIcon(TreeModel model, TreeItem item, Dict<primitive> props)
	{
		return <span class={ static::getTreeItemIcon(item) }></span>;
	}
	
	
	
	/**
	 * Returns icon by item
	 */
	lambda string getTreeItemIcon(TreeItem item)
	{
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			if (item.is_open) return "fa fa-folder-open";
			return "fa fa-folder";
		}
		if (item.kind == TreeItem::KIND_FILE) return "fa fa-file";
		return "";
	}
	
	
	
	/**
	 * Render context menu
	 */
	lambda Collection<UIStruct> renderContextMenu(Model model) =>
		<ContextMenu @model={ model.contextmenu } @key="contextmenu" @ref="contextmenu" @bind="contextmenu"
			@annotations=[
				new Event{ 
					"event": classof ContextMenuEvent, 
					"method_name": "onContextMenuClick", 
					"cancel": true 
				}
			]
		>
			{ static::renderContextMenuItems(model) }
		</ContextMenu>	
	;
	
	
	
	/**
	 * Render context menu items
	 */
	lambda Collection<UIStruct> renderContextMenuItems(Model model)
	{
		if (model.selected == "" or not model.contextmenu.is_active)
			return "";
		
		TreeItem item = this.model.getSelectedItem();
		if (item.kind == TreeModel::KIND_FOLDER)
		{
			return
				<ContextMenuItem icon='fa fa-file' @tag='action_create_file'>Create file</ContextMenuItem>
				<ContextMenuItem icon='fa fa-folder' @tag='action_create_folder'>Create folder</ContextMenuItem>
				<ContextMenuItem icon='fa fa-edit' @tag='action_rename_item'>Rename</ContextMenuItem>
				<ContextMenuItem icon='fa fa-trash' @tag='action_delete_item'>Delete</ContextMenuItem>
				<ContextMenuItem icon='fa fa-sync' @tag='action_reload_item'>Reload</ContextMenuItem>
			;
		}
		else
		{
			return
				<ContextMenuItem icon='fa fa-edit' @tag='action_rename_item'>Rename</ContextMenuItem>
				<ContextMenuItem icon='fa fa-trash' @tag='action_delete_item'>Delete</ContextMenuItem>
			;
		}
	}
	
	
	
	/**
	 * Render context menu
	 */
	lambda Collection<UIStruct> renderDialogs(Model model)
	{
		return 
			<Dialog @model={ model.dialog } @bind="dialog" @ref="dialog"
				@annotations=[
					new Event{ 
						"event": classof DialogResultEvent, 
						"method_name": "onDialogResult", 
					}
				]
			></Dialog>
		;
	};
	
	
	
	
	/* ---------------------------------- Events ----------------------------------- */
	
	/**
	 * Create new item
	 */
	public TreeItem newItem(Dict map)
	{
		return new TreeItem(map);
	}
	
	
	
	/**
	 * Update item by path
	 */
	public void updateItem(Collection<int> path, Dict data, Collection<TreeItem> items = null)
	{
		NavigatorItem item = this.model.getTreeItem(path);
		item = item.copy(data);
		if (items != null) item = item.setItems(items);
		this.setModel( this.model.setTreeItem(path, item) );
	}
	
	
	
	/**
	 * Select item by path
	 */
	public void selectItem(string tree_data_path)
	{
		this.updateModel({
			"selected": tree_data_path,
		});
	}
	
	
	
	/**
	 * Delete item by path
	 */
	public void deleteItem(Collection<int> path)
	{
		TreeModel model = this.model.deleteTreeItem
		(
			path
		);
		this.setModel( model );
	}
	
	
	/* ---------------------------------- Events ---------------------------------- */
	
	
	/**
	 * Event item click
	 */
	public void onTreeItemLabelClick(UIEvent<MouseClickEvent> e)
	{
		string tree_data_path = e.vdom.props.get("data-path");
		
		/* Select node */
		Model model = this.model;
		model = this.model.selectItem(tree_data_path);
		model <= contextmenu <= this.model.contextmenu.hide();
		this.setModel(model);
	}
	
	
	
	/**
	 * Event item click
	 */
	public void onTreeItemLabelContextMenu(UIEvent<MouseContextMenuEvent> e)
	{
		string tree_data_path = e.vdom.props.get("data-path");
		
		/* Show context menu and select item */
		this.contextmenu.show(e.event.pageX - window.scrollX, e.event.pageY - window.scrollY);
		this.selectItem(tree_data_path);
	}
	
	
	
	/**
	 * Event item double click
	 */
	public void onTreeItemLabelDoubleClick(UIEvent<MouseClickEvent> e)
	{
		string tree_data_path = e.vdom.props.get("data-path");
		Collection<int> path = TreeModel::splitPath(tree_data_path);
		this.openItem(path);
	}
	
	
	
	
	/* ---------------------------------- Actions ---------------------------------- */
	
	
	/**
	 * Navigation menu item click
	 */
	public void onContextMenuClick(UIEvent<ContextMenuItemClickEvent> e)
	{
		/* Hide context menu */
		this.updateModel({
			"contextmenu": this.model.contextmenu.hide(),
		});
		
		string tree_data_path = this.model.selected;
		Collection<int> path = TreeModel::splitPath(tree_data_path);
		if (e.event.tag == 'action_create_file')
		{
			this.showCreateFile(path);
		}
		else if (e.event.tag == 'action_create_folder')
		{
			this.showCreateFolder(path);
		}
		else if (e.event.tag == 'action_rename_item')
		{
			this.showRenameItem(path);
		}
		else if (e.event.tag == 'action_delete_item')
		{
			this.showDeleteItem(path);
		}
		else if (e.event.tag == 'action_reload_item')
		{
			this.reloadItem(path);
		}
		
	}
	
	
	
	/**
	 * Dialog create result
	 */
	public void onDialogResult(UIEvent<DialogEvent> e)
	{
		DialogEvent event = e.event;
		if (event.button_result == DialogModel::BUTTON_RESULT_OK)
		{
			/* Create file or folder */
			if (
				event.model.action == TreeModel::DIALOG_CREATE_FILE or
				event.model.action == TreeModel::DIALOG_CREATE_FOLDER
			)
			{
				this.createDialogItem(event);
			}
			
			/* Rename node */
			if (event.model.action == TreeModel::DIALOG_RENAME_ITEM)
			{
				this.renameDialogItem(event);
			}
			
			/* Remove node */
			if (event.model.action == TreeModel::DIALOG_DELETE_ITEM)
			{
				this.deleteDialogItem(event);
			}
			
			/* Reload node */
			if (event.model.action == TreeModel::DIALOG_RELOAD_ITEM)
			{
				/*this.reloadItem(event);*/
			}
		}
	}
	
	
	
	/* ---------------------------------- Show dialog ---------------------------------- */
	
	
	/**
	 * Create new file
	 */
	public void showCreateFile(Collection<int> path)
	{
		TreeItem item = this.model.getTreeItem(path);
		string file_path = this.model.getNamePath(path);
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			this.dialog.show
			({
				"action": TreeModel::DIALOG_CREATE_FILE,
				"style": DialogModel::STYLE_PROMT,
				"is_modal": true,
				"title": "",
				"message": "Create file in " ~ file_path,
				"tag": path,
			});
		}
		else
		{
			this.dialog.show
			({
				"style": DialogModel::STYLE_ALERT,
				"is_modal": true,
				"title": "Warning",
				"message": "File must be folder",
				"tag": path,
			});
		}
		
	}
	
	
	
	/**
	 * Show create new folder
	 */
	public void showCreateFolder(Collection<int> path)
	{
		TreeItem item = this.model.getTreeItem(path);
		string file_path = this.model.getNamePath(path);
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			this.dialog.show(
				{
					"action": TreeModel::DIALOG_CREATE_FOLDER,
					"style": DialogModel::STYLE_PROMT,
					"is_modal": true,
					"title": "",
					"message": "Create folder in " ~ file_path,
					"tag": path,
				}
			);
		}
		else
		{
			this.dialog.show(
				{
					"style": DialogModel::STYLE_ALERT,
					"is_modal": true,
					"title": "Warning",
					"message": "File must be folder",
					"tag": path,
				}
			);
		}
	}
	
	
	
	/**
	 * Rename node
	 */
	public void showRenameItem(Collection<int> path)
	{
		TreeItem item = this.model.getTreeItem(path);
		string file_path = this.model.getNamePath(path);
		string mesage = "";
		
		if (item == null)
		{
			return;
		}
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			mesage = "Rename folder " ~ file_path;
		}
		else if (item.kind == TreeItem::KIND_FILE)
		{
			mesage = "Rename file " ~ file_path;
		}
		
		if (mesage)
		{
			this.dialog.show(
				{
					"action": TreeModel::DIALOG_RENAME_ITEM,
					"style": DialogModel::STYLE_PROMT,
					"input": item.getItemName(),
					"is_modal": true,
					"title": "",
					"message": mesage,
					"tag": path,
				}
			);
		}
		
	}
	
	
	
	/**
	 * Show delete node
	 */
	public void showDeleteItem(Collection<int> path)
	{
		TreeItem item = this.model.getTreeItem(path);
		string file_path = this.model.getNamePath(path);
		string mesage = "";
		
		if (item == null)
		{
			return;
		}
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			mesage = "Delete folder " ~ file_path ~ "?";
		}
		else if (item.kind == TreeItem::KIND_FILE)
		{
			mesage = "Delete file " ~ file_path ~ "?";
		}
		
		if (mesage)
		{
			this.dialog.show(
				{
					"action": TreeModel::DIALOG_DELETE_ITEM,
					"style": DialogModel::STYLE_CONFIRM,
					"is_modal": true,
					"title": "",
					"message": mesage,
					"tag": path,
				}
			);
		}
		
	}
	
	
	
	/* ---------------------------------- Reload Item ---------------------------------- */
	
	
	/**
	 * Reload item
	 */
	void reloadItem(Collection<int> path)
	{
	}
	
	
	
	/* ---------------------------------- Open Item ---------------------------------- */
	
	
	
	/**
	 * Open item
	 */
	void openItem(Collection<int> path)
	{
		TreeItem item = this.model.getTreeItem(path);
		
		if (item.kind == TreeItem::KIND_FOLDER)
		{
			/* Update model */
			this.updateItem(
				path,
				{
					"is_open": not item.is_open,
					"is_reload": false,
				}
			);
			
			/* Signal Out */
			this.signalOut( new TreeEvent{ "kind": TreeEvent::ITEM_OPEN, "path": path, "item": item } );
		}
	}
	
	
	
	
	
	/* ---------------------------------- Create Item ---------------------------------- */
	
	
	
	/**
	 * Create item by dialog result
	 */
	public TreeItem createNewItemByDialogResult(DialogResultEvent result)
	{
		string name = result.input;
		string kind = "";
		DialogModel model = result.model;
		
		if (model instanceof DialogModel)
		{
			if (model.action == TreeModel::DIALOG_CREATE_FILE) kind = TreeItem::KIND_FILE;
			else if (model.action == TreeModel::DIALOG_CREATE_FOLDER) kind = TreeItem::KIND_FOLDER;
			
			TreeItem item = this.newItem({
				"name": name,
				"kind": kind,
			});
			
			return item;
		}
		
		return null;
	}
	
	
	
	/**
	 * Create item
	 */
	public void createDialogItem(DialogResultEvent result)
	{
		Collection<int> path = result.model.tag;
		TreeItem item = this.createNewItemByDialogResult(result);
		if (item != null)
		{
			
			this.setModel
			(
				this.model
				
				/* Set parent item open */
				.setIsOpen(path, true)
				
				/* Add new item */
				.addTreeItem
				(
					path,
					item
				)
			);
			
			/* Signal Out */
			this.signalOut( new TreeEvent{ "kind": TreeEvent::ITEM_CREATE, "path": path, "item": item } );
		}
	}
	
	
	
	/* ---------------------------------- Rename Item ---------------------------------- */
	
	
	/**
	 * Rename item
	 */
	public void renameDialogItem(DialogResultEvent result)
	{
		Collection<int> path = result.model.tag;
		TreeItem item = this.model.getTreeItem(path);
		if (item != null)
		{
			TreeItem item_new = item;
			TreeItem item_old = item;
			item_new <= name <= result.input;
			this.setModel(
				this.model.setTreeItem
				(
					result.model.tag,
					item_new
				) 
			);
			
			/* Signal Out */
			this.signalOut(
				new TreeEvent
				{
					"kind": TreeEvent::ITEM_RENAME,
					"path": path,
					"item_new": item_new,
					"item_old": item_old,
				}
			);
		}
	}
	
	
	
	/* ---------------------------------- Delete Item ---------------------------------- */
	
	
	/**
	 * Remove item
	 */
	public void deleteDialogItem(DialogResultEvent result)
	{
		Collection<int> path = result.model.tag;
		this.setModel( this.model.deleteTreeItem(path) );
	}
	
	
}
